package de.buffalodan.ci.network;

import java.util.ArrayList;
import java.util.Random;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.data.xy.DefaultXYDataset;

import de.buffalodan.ci.network.Neuron.Type;

public class FFNetwork {

	private ArrayList<Layer> layers;

	private static final double LEARNING_RATE = 0.1;

	public FFNetwork(ArrayList<Layer> layers) {
		this.layers = layers;
		buildConnections();
	}
	
	public double calculateError(double expected) {
		Neuron outN = layers.get(2).getNeurons().get(0);
		double tmo = expected-outN.getOutput();
		return (tmo*tmo)/2;
	}

	public void hardcodeBackpropagate(double expected) {
		Neuron outN = layers.get(2).getNeurons().get(0);
		ArrayList<Connection> cs = outN.getProducerConnections();
		for (Connection connection : cs) {
			double consumerOut = connection.getN2().getOutput();
			double producerOut = connection.getN1().getOutput();
			double dw = -(expected - consumerOut) * consumerOut * (1 - consumerOut) * producerOut;
			connection.setNewWeight(connection.getWeight() - LEARNING_RATE * dw);
		}
		
		// update AFTER backpropagating
		for (int i = 0; i < layers.size() - 1; i++) {
			Layer layer = layers.get(i);
			for (Neuron n : layer.getNeurons()) {
				cs = n.getConsumerConnections();
				for (Connection connection : cs) {
					connection.update();
				}
			}
		}
	}

	public void calculate() {
		for (Layer layer : layers) {
			layer.pullAndProduce();
		}
	}

	private void buildConnections() {
		Random r = new Random(System.currentTimeMillis());
		for (int i = 0; i < layers.size() - 1; i++) {
			Layer layer = layers.get(i);
			Layer next = layers.get(i + 1);
			int ni = 0;
			for (Neuron n : layer.getNeurons()) {
				int ni2 = 0;
				for (Neuron n2 : next.getNeurons()) {
					double weight = r.nextDouble() - 0.5;
					Connection connection = new Connection(n, n2, weight);
					n.addConsumerConnection(connection);
					n2.addProducerConnection(connection);

					System.out.println("Added Connection between L" + i + "N" + ni + " and L" + (i + 1) + "N" + ni2
							+ " with weight " + weight);
					ni2++;
				}
				ni++;
			}
		}
	}

	public static void main(String[] args) {
		double[] xWerte = new double[1001];
		double[] yWerte = new double[1001];
		double[] yWerteNetwork = new double[1001];

		for (int i = 0; i < 1001; i++) {
			double x = -10 + 0.02 * i;
			xWerte[i] = x;
			yWerte[i] = -4 * Math.cos(x / 3) + Math.sin(15 / (Math.abs(0.5 * x + 2) + 1)) + 0.2 * x;
		}

		ActivationFunction fermi = new ActivationFunction() {
			public double calculate(double input) {
				return 1 / (1 + Math.pow(Math.E, -input));
			}
		};

		ArrayList<Layer> layers = new ArrayList<>();
		Layer inputLayer = new Layer(0);
		Layer hiddenLayer = new Layer(10, Type.HIDDEN, fermi, 0.3);
		Layer outputLayer = new Layer(1, Type.OUTPUT, fermi, 3);
		layers.add(inputLayer);
		layers.add(hiddenLayer);
		layers.add(outputLayer);

		FFNetwork network = new FFNetwork(layers);
		double errorTotal = 0;
		for (int i = 0; i < 1001; i++) {
			// Nur ein Input da
			inputLayer.getNeurons().get(0).setInput(xWerte[i]);
			network.calculate();
			// Auch nur ein Output
			double output = outputLayer.getNeurons().get(0).getOutput();
			yWerteNetwork[i] = output;
			System.out.println(output);
			//network.hardcodeBackpropagate(yWerte[i]);
			errorTotal+=network.calculateError(yWerte[i]);
		}
		System.out.println("Mittlerer quadratischer Fehler:"+ (errorTotal/1001));

		DefaultXYDataset dataset = createSimpleXYDataset("funtion", xWerte, yWerte);
		addToDataset(dataset, "network", xWerte, yWerteNetwork);
		JFreeChart chart = ChartFactory.createXYLineChart("Plot", "X", "Y", dataset);
		ChartFrame frame = new ChartFrame("Plotter", chart);
		frame.setVisible(true);
		frame.setSize(800, 600);
	}

	public static DefaultXYDataset createSimpleXYDataset(String key, double[] xs, double[] ys) {
		DefaultXYDataset dataset = new DefaultXYDataset();
		double[][] data = new double[2][0];
		data[0] = xs;
		data[1] = ys;
		dataset.addSeries(key, data);
		return dataset;
	}

	public static void addToDataset(DefaultXYDataset dataset, String key, double[] xs, double[] ys) {
		double[][] data = new double[2][0];
		data[0] = xs;
		data[1] = ys;
		dataset.addSeries(key, data);
	}

}
